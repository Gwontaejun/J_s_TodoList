{"version":3,"sources":["Component/TodoListInput.js","Container/TodoListInput.js","Component/TodoListOutput.js","Container/TodoListOutput.js","App.js","reportWebVitals.js","Store/Store.js","index.js"],"names":["TodoListinput","props","state","Title","handleChange","bind","e","this","setState","target","value","style","width","display","flexDirection","justifyContent","height","className","onChange","placeholder","onKeyPress","ev","key","replace","length","onClickInput","alert","preventDefault","Component","connect","dispatch","type","TodoListInput","TodoListOutput","textAlign","margin","overflowY","TodoList","map","data","index","background","marginRight","onClick","onClickFinish","Check","onClickDelete","FinishList","onClickFinishDataRollback","History","onClickFinishDataDelete","App","Date","Hours","getHours","Minutes","getMinutes","Seconds","getSeconds","TimeSetting","Interval","setInterval","clearInterval","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","persistConfig","storage","persistReducer","action","undefined","indexOf","concat","filter","store","createStore","reducer","persistor","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32524cd4.chunk.js","sourcesContent":["import { Button, InputBase } from '@material-ui/core';\r\nimport { React, Component } from 'react';\r\n\r\nclass TodoListinput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      Title: \"\",\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(e) { //input에 값 입력시 작동하는 이벤트 state의 값을 바꿔줌.\r\n    this.setState({ Title: e.target.value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ width: \"100%\", display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", height:\"10%\" }}>\r\n        <input className={\"InputTextStyle\"} value={this.state.Title} onChange={this.handleChange} placeholder={\"할일을 입력해주세요.\"}\r\n          onKeyPress={(ev) => { //엔터 입력시 작동하는 이벤트\r\n            if (ev.key === 'Enter') {\r\n              if(this.state.Title.replace(/ /g, \"\").length !== 0){\r\n                this.props.onClickInput(this.state.Title);\r\n                this.setState({Title : \"\"});\r\n              }else alert(\"빈값은 입력하실수 없습니다.\");\r\n              ev.preventDefault();\r\n            }\r\n          }} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoListinput;\r\n","import TodoListInput from \"../Component/TodoListInput\";\r\nimport { connect } from 'react-redux';\r\n\r\nfunction mapReduxDispatchToReactProps(dispatch) {\r\n    return {\r\n        //할일을 입력하면 작동하는 이벤트.\r\n        onClickInput: function (Title) {\r\n            dispatch({ type: 'InputData', Title: Title });\r\n        }\r\n    }\r\n}\r\n\r\n//react-redux의 connect 함수를 사용하여 래핑 컴포넌트를 만듦.\r\nexport default connect(null, mapReduxDispatchToReactProps)(TodoListInput);","import { Button, ButtonGroup } from '@material-ui/core';\r\nimport { Check, History } from '@material-ui/icons';\r\nimport DeleteForever from '@material-ui/icons/DeleteForever';\r\nimport { React, Component } from 'react';\r\n\r\nclass TodoListOutput extends Component {\r\n  render() {\r\n    return (\r\n      <div className={\"TodoListOutput\"}>\r\n        <h1 style={{ width: \"100%\", textAlign: \"center\", margin: \"2%\" }}>할일 리스트</h1>\r\n        <div style={{ height: \"40%\", overflowY: \"auto\" }}>\r\n          {this.props.TodoList.map((data, index) => {\r\n            return (\r\n              <div key={index} className={\"ListStyle\"}>\r\n                <h2 style={{ margin: 0, width: \"80%\" }}>{index + 1}.{data}</h2>\r\n                <div style={{ display: \"flex\", width: \"20%\", justifyContent: \"flex-end\" }}>\r\n                  <button className={\"ButtonStyle\"} style={{ background: \"#00be00\", marginRight: \"1%\" }} onClick={function () {\r\n                    this.props.onClickFinish(data);\r\n                  }.bind(this)}><Check /></button>\r\n                  <button className={\"ButtonStyle\"} style={{ background: \"#dc0000\" }} onClick={function () {\r\n                    this.props.onClickDelete(data);\r\n                  }.bind(this)}><DeleteForever /></button>\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n        <h1 style={{ width: \"100%\", textAlign: \"center\", margin: \"2%\" }}>완료 리스트</h1>\r\n        <div style={{ height: \"40%\", overflowY: \"auto\" }}>\r\n          {this.props.FinishList.map((data, index) => {\r\n            return (\r\n              <div key={index} className={\"ListStyle\"}>\r\n                <h2 style={{ margin: 0, width: \"80%\" }}>{index + 1}.{data}</h2>\r\n                <div style={{ display: \"flex\", width: \"20%\", justifyContent: \"flex-end\" }}>\r\n                  <button className={\"ButtonStyle\"} style={{ background: \"#00be00\", marginRight: \"1%\" }} onClick={function () {\r\n                    this.props.onClickFinishDataRollback(data);\r\n                  }.bind(this)}><History /></button>\r\n                  <button className={\"ButtonStyle\"} style={{ background: \"#dc0000\" }} onClick={function () {\r\n                    this.props.onClickFinishDataDelete(data);\r\n                  }.bind(this)}><DeleteForever /></button>\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoListOutput;\r\n","import TodoListOutput from \"../Component/TodoListOutput\";\r\nimport { connect } from 'react-redux';\r\n\r\nfunction mapReduxStateToReactProps(state) {\r\n    return {\r\n        //TodoList, FinishList props로 store의 TodoList 및 FinishList값을 넣어줌.\r\n        TodoList: state.TodoList,\r\n        FinishList: state.FinishList\r\n    }\r\n}\r\nfunction mapReduxDispatchToReactProps(dispatch) {\r\n    return {\r\n        //할일 리스트의 삭제버튼 클릭 이벤트\r\n        onClickDelete: function (Title) {\r\n            dispatch({ type: 'DeleteData', Title: Title });\r\n        },\r\n        //할일 리스트의 완료버튼 클릭 이벤트\r\n        onClickFinish: function (Title) {\r\n            dispatch({ type: 'FinishData', Title: Title });\r\n        },\r\n        //완료 리스트의 롤백버튼 클릭 이벤트\r\n        onClickFinishDataRollback: function (Title) {\r\n            dispatch({ type: 'FinishDataRollback', Title: Title })\r\n        },\r\n        //완료 리스트의 삭제버튼 클릭 이벤트\r\n        onClickFinishDataDelete: function (Title) {\r\n            dispatch({ type: 'FinishDataDelete', Title: Title })\r\n        }\r\n    }\r\n}\r\n\r\n//react-redux의 connect 함수를 사용하여 래핑 컴포넌트를 만듦.\r\nexport default connect(mapReduxStateToReactProps, mapReduxDispatchToReactProps)(TodoListOutput);","import { React, Component } from 'react';\nimport TodoListinput from './Container/TodoListInput';\nimport TodoListOutput from './Container/TodoListOutput';\nimport './Style/Component.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Date: new Date(),\n      Hours: new Date().getHours(),\n      Minutes: new Date().getMinutes(),\n      Seconds: new Date().getSeconds(),\n    }\n\n    this.TimeSetting = this.TimeSetting.bind(this);\n  }\n\n  componentWillMount() {\n    this.TimeSetting();\n  }\n\n  componentDidMount() {\n    this.Interval = setInterval(() => {\n      this.TimeSetting();\n    }, 1000);\n  }\n\n  componentWillUnmount(){ //종료되면 반복하는것도 클리어시키기\n    clearInterval(this.Interval)\n  }\n\n  TimeSetting() {\n    let Hours = new Date().getHours() + \"\";\n    let Minutes = new Date().getMinutes() + \"\";\n    let Seconds = new Date().getSeconds() + \"\";\n\n    console.log(Seconds);\n    if (Hours.length === 1) {\n      Hours = \"0\" + Hours;\n    }\n    if (Minutes.length === 1) {\n      Minutes = \"0\" + Minutes;\n    }\n    if (Seconds.length === 1) {\n      Seconds = \"0\" + Seconds;\n    }\n    this.setState({ Hours: Hours, Minutes: Minutes, Seconds: Seconds });\n  }\n\n  render() {\n    return (\n      <div className={\"App\"}>\n        <div className={\"Main\"}>\n          <div className={\"Main_Head\"}>\n          <h1 className={\"Main_Title\"}>\n            {this.state.Hours}:{this.state.Minutes}:{this.state.Seconds}\n          </h1>\n          </div>\n          <div className={\"Main_Body\"}>\n            <TodoListinput />\n            <TodoListOutput />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { persistReducer } from \"redux-persist\";\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage\r\n}\r\n\r\nfunction reducer(state, action) {\r\n    if (state === undefined) {\r\n        return { TodoList: [], FinishList: [] }\r\n    }\r\n\r\n    //데이터 입력시 실행. TodoList의 배열에 Title을 concat으로 붙여줌.\r\n    if (action.type === \"InputData\") {\r\n        //데이터 입력시 TodoList에 이미 같은값이 있으면 alert을 띄워줌.\r\n        if (state.TodoList.indexOf(action.Title) == -1) {\r\n            return { ...state, TodoList: state.TodoList.concat(action.Title) }\r\n        } else alert(\"해당값이 리스트에 있습니다.\");\r\n    }\r\n\r\n    //데이터 삭제버튼 클릭시 실행. TodoList의 배열을 filter함수를 사용하여 해당 Title의 값을 걸러내어 state에 붙여줌.\r\n    if (action.type === \"DeleteData\") {\r\n        return { ...state, TodoList: state.TodoList.filter(Title => Title !== action.Title) }\r\n    }\r\n\r\n    //데이터 체크버튼 클릭시 실행. FinishData의 배열에 Title을 concat으로 붙여줌과 동시에 TodoList에 Title의 값을 filter로 걸러내어서 state에 붙여줌.\r\n    if (action.type === \"FinishData\") {\r\n        return { ...state, FinishList: state.FinishList.concat(action.Title), TodoList: state.TodoList.filter(Title => Title !== action.Title) }\r\n    }\r\n\r\n    //데이터 체크항목의 롤백버튼을 클릭시 실행. FinishData의 배열을 filter함수를 사용하여 해당 Title의 값을 걸러내어 state에 붙여주며 TodoList에 값을 넣어줌.\r\n    if (action.type === \"FinishDataRollback\") {\r\n        return { ...state, TodoList: state.TodoList.concat(action.Title), FinishList: state.FinishList.filter(Title => Title !== action.Title) }\r\n    }\r\n\r\n    //데이터 체크항목의 삭제버튼을 클릭시 실행. FinishData의 배열을 filter함수를 사용하여 해당 Title의 값을 걸러내어 state에 붙여줌.\r\n    if (action.type === \"FinishDataDelete\") {\r\n        return { ...state, FinishList: state.FinishList.filter(Title => Title !== action.Title) }\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\n\r\nexport default persistReducer(persistConfig, reducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport reducer from './Store/Store';\nimport persistStore from 'redux-persist/es/persistStore';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { createStore } from 'redux';\n\n\nconst store = createStore(reducer);\nconst persistor = persistStore(store);\n\n\nReactDOM.render(\n  <Provider store={store}>\n    {/*redux-persist를 사용함으로써 리로딩되어도 store 값이 유지가 됨.*/}\n    <PersistGate persistor={persistor} />\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}